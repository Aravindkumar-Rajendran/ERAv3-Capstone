meta {
  name: ConversationHistory
  type: http
  seq: 7
}

get {
  url: http://localhost:8000/conversations/{{conversation_id}}
  body: none
  auth: bearer
}

auth:bearer {
  token: {{auth_token}}
}

vars:pre-request {
  conversation_id: REPLACE_WITH_ACTUAL_CONVERSATION_ID
}

assert {
  res.status: eq 200
  res.body.status: eq success
  res.body.messages: isDefined
  res.body.conversation_info: isDefined
}

tests {
  test("Should return conversation history", function() {
    expect(res.status).to.equal(200);
    expect(res.body).to.have.property('status');
    expect(res.body.status).to.equal('success');
    expect(res.body).to.have.property('messages');
    expect(res.body.messages).to.be.an('array');
  });
  
  test("Messages should have proper structure", function() {
    if (res.body.messages && res.body.messages.length > 0) {
      const message = res.body.messages[0];
      expect(message).to.have.property('role');
      expect(message).to.have.property('content');
      expect(message).to.have.property('timestamp');
    }
  });
  
  test("Should include conversation metadata", function() {
    expect(res.body).to.have.property('conversation_id');
    expect(res.body.conversation_id).to.be.a('string');
  });
}
